<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <configSections>
    <section name="Doopec.Dds" type="Doopec.Dds.Config.DdsConfigurationSectionHandler, Doopec" />
    <section name="Doopec.Rtps" type="Doopec.Rtps.Config.RtpsConfigurationSectionHandler, Doopec" />
    <section name="DDS" type="Doopec.Configuration.DDSConfigurationSection, Doopec, Version=0.1.*, Culture=neutral, PublicKeyToken=null"/>
    <section name="RTPS" type="Doopec.Configuration.RTPSConfigurationSection, Doopec, Version=0.1.*, Culture=neutral, PublicKeyToken=null"/>
  </configSections>
  <DDS xmlns="urn:Configuration" vendor="Doopec" version="2.1">
    <!--
		This is just a minimal sample configuration file that shows how to declare
		the configuration sections.

		Because an XML Schema Definition (XSD) is generated for each configuration
		section, it should be trivial to edit these files because you have
		IntelliSense on the XML definition.
		-->
    <boostrapType name="default" type="Doopec.Dds.Core.BootstrapImpl, Doopec" />
    <domains>
      <!--
		Defining the domains and the basic characteristics for every one, 
		like the profile that are used, and the configuration of QoS policies 
		that are going to use in the domain, finally a identifier is defined 
		-->
      <domain name="Main" id="0">
        <transportProfile name="defaultRtps" />
        <qoSProfile name="defaultQoS" />
        <guid kind="Fixed" val="7F294ABE-33F2-40B9-BFF5-7D9376EA061C" />
      </domain>
      <domain name="Main" id="1">
        <transportProfile name="defaultRtps" />
        <qoSProfile name="defaultQoS" />
        <guid kind="Fixed" val="7F294ABE-33F2-40B9-BFF5-7D9376EA061C" />
      </domain>
    </domains>
    <logLevel levelMin="DEBUG" levelMax="FATAL" />
    <!-- 
	  Defining the default profile of QoS Policy  
	  entityFactory: Specifies whether an entity will have enable() called when it is created
	  -->
    <qoSProfiles>
      <qoSProfileDef name="defaultQoS">
        <domainParticipantFactoryQos name="defaultDomainParticipantFactoryQoS">
          <entityFactory autoenableCreatedEntities="true" />
        </domainParticipantFactoryQos>
        <!--
		  Specifying the default values for QoS policy on DomainParticipant
		  entityFactory: Specifies whether an entity will have enable() called when it is created
		  userData: User Data not known by the middleware, but distributed by means of built-in topics
		  -->
        <domainParticipantQos name="defaultDomainParticipantQoS">
          <entityFactory autoenableCreatedEntities="true" />
          <userData value="" />
        </domainParticipantQos>
        <!--
		  Specifying the default values for QoS policy on Topic
		  topicData: User Data not known by the middleware, but distributed by means of built-in topics
		  deadline: Set a maximum time in which an update must be published
		  durability: This policy expresses if the data should 'outlive' their writing time, 
					  it can be VOLATILE, TRANSIENT_LOCAL_TRANSCIENT or PERSISTENT
		  -->
        <topicQoS name="defaultTopicQoS">
          <topicData value="" />
          <deadline period="100" />
          <durability kind="VOLATILE" />
        </topicQoS>
        <!--
		  Specifying the default values for QoS policy on Publisher
		  entityFactory: Specifies whether an entity will have enable() called when it is created
		  groupData: User data not known by the middleware, but distributed by means of built-in topics
		  partition: List of partitions that the enitity will connect with
		  presentation: Specifies how the samples representing changes to data instances are presented to the subscribing application
						accessScope determines the largest scope spanning the entities for which the order and coherency of changes 
						can be preserved, the two booleans control whether coherentAccess and orderedAccess are supported within 
						the scope accessScope 
		  -->
        <publisherQoS name="defaultPublisherQoS">
          <entityFactory autoenableCreatedEntities="true" />
          <groupData value="" />
          <partition value="" />
          <presentation accessScope="INSTANCE" coherentAccess="true" orderedAccess="true" />
        </publisherQoS>
        <!--
		  Specifying the default values for QoS policy on Subscriber
		  entityFactory: Specifies whether an entity will have enable() called when it is created
		  groupData: User data not known by the middleware, but distributed by means of built-in topics
		  partition: List of partitions that the enitity will connect with
		  presentation: Specifies how the samples representing changes to data instances are presented to the subscribing application
						accessScope determines the largest scope spanning the entities for which the order and coherency of changes 
						can be preserved, the two booleans control whether coherentAccess and orderedAccess are supported within 
						the scope accessScope 
		  List of partitions that the enitity will connect with. Allows restricting connections to only those entities with a matching partition
		  -->
        <subscriberQoS name="defaultSubscriberQoS">
          <entityFactory autoenableCreatedEntities="true" />
          <groupData value="" />
          <partition value="" />
          <presentation accessScope="INSTANCE" coherentAccess="true" orderedAccess="true" />
        </subscriberQoS>
        <!--
		  Specifying the default values for QoS policy on DataWriter
		  deadline: Set a maximum time in which an update must be published
		  destinationOrder: How data is ordered on the receiving side
		  userData: User Data not known by the middleware, but distributed by means of built-in topics
		  durability: This policy expresses if the data should 'outlive' their writing time, 
					  it can be VOLATILE, TRANSIENT_LOCAL_TRANSCIENT or PERSISTENT
		  durabilityService: Specifies the configuration of the durability service. That is, the service that implements 
							 the DURABILITY kind of TRANSIENT and PERSISTENT
		  history: Buffering of data values before they are sent
				   KEEP_ALL tries to not lose any values
				   KEEP_LAST keeps up to "depth" values
		  latencyBudget: This is a HINT.Maximum duration between the data being written and data recevied by subscribing application
		  lifespan: Sets the expiration time of a published value. The expiration time is the time published + duration
		  ownershipStrength: Used to determine who owns the Instance if OWNERSHIP Qos is set to EXCLUSIVE
		  liveliness: Method used to maintain liveliness status. Length of time with no liveliness updates means the entity is dead
				      Decreassing the leaseDuration shortens the time to detect the entity has gone away
		  reliability: Reliablity of the connection. BEST_EFFORT means values may be dropped or lost
		  resourceLimits: Limits amount of resources to be used to meet other QoS
		  transportPriority: This is a HINT. Suggestion for setting the priority of the transport
		  writerDataLifecycle: Indicates whether the system will dispose of an Instance when unregister() is called
		  -->
        <dataWriterQoS name="defaultDataWriterQoS">
          <deadline period="1" />
          <destinationOrder kind="BY_SOURCE_TIMESTAMP" />
          <durability kind="VOLATILE" />
          <durabilityService historyDepth="0" historyKind="KEEP_LAST" maxInstances="1" maxSamples="1" maxSamplesPerInstance="1" serviceCleanupDelay="100" />
          <history kind="KEEP_LAST" depth="1" />
          <latencyBudget duration="100" />
          <lifespan duration="100" />
          <liveliness kind="AUTOMATIC" leaseDuration="100" />
          <ownership kind="SHARED" />
          <ownershipStrength value="100" />
          <reliability kind="BEST_EFFORT" maxBlockingTime="1000" />
          <resourceLimits maxInstances="1" maxSamples="1" maxSamplesPerInstance="1" />
          <transportPriority value="1" />
          <userData value="" />
          <writerDataLifecycle autodisposeUnregisteredInstances="true" />
        </dataWriterQoS>
        <!--
		  Specifying the default values for QoS policy over DataReader
		  deadline: Set a maximum time in which an update must be published
		  destinationOrder: How data is ordered on the receiving side
		  userData: User Data not known by the middleware, but distributed by means of built-in topics
		  durability: This policy expresses if the data should 'outlive' their writing time, 
					  it can be VOLATILE, TRANSIENT_LOCAL_TRANSCIENT or PERSISTENT
		  history: Buffering of data values before they are sent
				   KEEP_ALL tries to not lose any values
				   KEEP_LAST keeps up to "depth" values
		  latencyBudget: This is a HINT.Maximum duration between the data being written and data recevied by subscribing application
		  liveliness: Method used to maintain liveliness status. Length of time with no liveliness updates means the entity is dead
				      Decreassing the leaseDuration shortens the time to detect the entity has gone away.
		  reliability: Reliablity of the connection. BEST_EFFORT means values may be dropped or lost
		  resourceLimits: Limits amount of resources to be used to meet other QoS
		  readerDataLifecycle: Delay until automatically removing all samples (even ones not read/taken) for Instances 
							   whose state is no writer or disposed
		  timeBasedFilter: DataReader is only interested in published data that is minimum_separation apart
		  -->
        <dataReaderQoS name="defaultDataReaderQoS">
          <deadline period="1" />
          <destinationOrder kind="BY_SOURCE_TIMESTAMP" />
          <durability kind="VOLATILE" />
          <history kind="KEEP_LAST" depth="1" />
          <latencyBudget duration="100" />
          <liveliness kind="AUTOMATIC" leaseDuration="100" />
          <ownership kind="SHARED" />
          <reliability kind="BEST_EFFORT" maxBlockingTime="1000" />
          <resourceLimits maxInstances="1" maxSamples="1" maxSamplesPerInstance="1" />
          <readerDataLifecycle autopurgeDisposedSamplesDelay="1000" autopurgeNowriterSamplesDelay="1000" />
          <timeBasedFilter minimumSeparation="1000" />
          <userData value="" />
        </dataReaderQoS>
      </qoSProfileDef>
    </qoSProfiles>
  </DDS>
  <RTPS xmlns="urn:Configuration">
    <!--
		This is just a minimal sample configuration file that shows how to declare
		the configuration sections.

		Because an XML Schema Definition (XSD) is generated for each configuration
		section, it should be trivial to edit these files because you have
		IntelliSense on the XML definition.
		-->
    <transports>
      <transport name="defaultRtps" type="Doopec.Rtps.RtpsTransport.RtpsEngine, Doopec">
        <ttl val="1" />
        <discovery name="defaultDiscovery">
          <resendPeriod val="30000" />
          <useSedpMulticast val="true" />
          <portBase val="7400" />
          <domainGain val="250" />
          <participantGain val="2" />
          <offsetMetatrafficMulticast val="0" />
          <offsetMetatrafficUnicast val="10" />
          <metatrafficUnicastLocatorList val="localhost" />
          <metatrafficMulticastLocatorList val="239.255.0.1" />
        </discovery>
        <rtpsWriter>
          <heartbeatPeriod val="1000" />
          <nackResponseDelay val="200" />
          <nackSuppressionDuration val="0" />
          <pushMode val="true" />
        </rtpsWriter>
        <rtpsReader>
          <heartbeatResponseDelay val="500" />
          <heartbeatSuppressionDuration val="0" />
        </rtpsReader>
      </transport>
    </transports>
  </RTPS>

  <Doopec.Dds>
    <!--<add key="TransportEngine" value="Doopec.Rtps.SharedMem.FakeEngine, Doopec" />-->
    <add key="TransportEngine" value="Doopec.Rtps.RtpsTransport.RtpsEngine, Doopec" />
    <add key="DefaultDomainId" value="1" />

    <add key="DefaultDomainQoS" value="defaultDomain" />
    <add key="DefaultTopicQoS" value="defaultTopic" />
    <add key="DefaultDataWriterQoS" value="defaultDataWriter" />
    <add key="DefaultDataReaderQoS" value="defaultDataReader" />

    <Doopec.Dds.QoS.Domain name="defaultDomain">
      <!-- Default user data is not set -->
      <add key="userData" value=""/>
      <!-- Default autoenable created entities is true -->
      <add key="autoEnableCreatedEntities" value="true"/>
    </Doopec.Dds.QoS.Domain>

    <Doopec.Dds.QoS.Topic name="defaultTopic">
      <!--Default user data is not set-->
      <add key="topicData" value=""/>
      <add key="durability" value="VOLATILE, 0"/>
      <add key="realibility" value="BEST_EFFORT, Infinity"/>
    </Doopec.Dds.QoS.Topic>

    <!--<Doopec.Dds.DataWriter name="defaultRtpsWriter">
      <add key="unicastLocatorList" value="udp://224.0.1.111:9999" />
    </Doopec.Dds.DataWriter>-->

    <Doopec.Dds.QoS.DataWriter name="defaultDataWriter">
      <add key="durability" value="VOLATILE, 0"/>
      <add key="realibility" value="RELIABLE, 100"/>
    </Doopec.Dds.QoS.DataWriter>

    <Doopec.Dds.QoS.DataReader name="defaultDataReader">
      <add key="durability" value="VOLATILE, 0"/>
      <add key="realibility" value="RELIABLE, 100"/>
    </Doopec.Dds.QoS.DataReader>
  </Doopec.Dds>

  <Doopec.Rtps>
    <Doopec.Rtps.SPDP>
      <!-- A comma separated list of URIs, that will be used to start listeners for discovery. -->
      <add key="unicastLocatorList" value="udp://localhost" />
      <add key="multicastLocatorList" value="udp://239.255.0.1" />
      <!--SPDP writers periodical announcement rate, in milliseconds-->
      <add key="resendDataPeriod" value="3000" />
      <!--The SPDP built-in Endpoints are configured using well-known ports (see Section 8.5.3.4)-->
      <WellKnownPorts portBase="7400" domainIdGain="250" participantIdGain="2" offsetd0="0" offsetd1="10" offsetd2="1" offsetd3="11" />
    </Doopec.Rtps.SPDP>
    <Doopec.Rtps.Writer>
      <add key="pushMode" value="True" />
      <add key="heartbeatPeriod" value="5000" />
      <add key="nackResponseDelay" value="200" />
      <add key="nackSuppressionDuration" value="0" />
    </Doopec.Rtps.Writer>
    <Doopec.Rtps.Reader>
      <add key="heartbeatResponseDelay" value="1000" />
      <add key="heartbeatSuppressionDuration" value="0" />
    </Doopec.Rtps.Reader>
  </Doopec.Rtps>
  <appSettings>
    <add key="org.omg.dds.serviceClassName" value="Doopec.Dds.Core.BootstrapImpl, Doopec" />
    <add key="ClientSettingsProvider.ServiceUri" value="" />
  </appSettings>
    <startup> 
        <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
    </startup>
</configuration>